---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Create a lambda function stack to empty S3 bucket
Parameters:
  BucketName:
    Description: Name of the S3 Bucket which needs to be emptied
    Type: String

Resources:
  CleanUpS3Bucket:
    Type: 'AWS::CloudFormation::CustomResource'
    DependsOn:
      - CleanUpS3BucketFunction
    Properties:
      DestBucket: !Ref BucketName
      ServiceToken: !GetAtt
        - CleanUpS3BucketFunction
        - Arn
  CleanUpS3BucketFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - S3CleanUpRole
    Properties:
      Description: Empty S3 bucket
      Handler: index.handler
      Role: !GetAtt
        - S3CleanUpRole
        - Arn
      Runtime: python2.7
      Timeout: 240
      Code:
        ZipFile: !Join
          - |+

          - - import json
            - import logging
            - import threading
            - import boto3
            - import cfnresponse
            - client = boto3.client('s3')
            - ''
            - ''
            - 'def delete_nonversioned_objects(bucket):'
            - '    print(''Collect data from %s'' % bucket)'
            - '    paginator = client.get_paginator(''list_objects_v2'')'
            - '    result = paginator.paginate(Bucket=bucket)'
            - '    objects = []'
            - '    for page in result:'
            - '        try:'
            - '            for k in page[''Contents'']:'
            - '                objects.append({''Key'': k[''Key'']})'
            - '                print("Delete bucket objects")'
            - '                client.delete_objects(Bucket=bucket, Delete={''Objects'': objects})'
            - '                objects = []'
            - '        except:'
            - '            pass'
            - '            print("bucket is already empty")'
            - ''
            - ''
            - 'def delete_versionedobjects(bucket):'
            - '    print(''Collect data from %s'' % bucket)'
            - '    paginator = client.get_paginator(''list_object_versions'')'
            - '    result = paginator.paginate(Bucket=bucket)'
            - '    objects = []'
            - '    for page in result:'
            - '        try:'
            - '            for k in page[''Versions'']:'
            - '                objects.append({''Key'':k[''Key''],''VersionId'': k[''VersionId'']})'
            - '            try:'
            - '                for k in page[''DeleteMarkers'']:'
            - '                    version = k[''VersionId'']'
            - '                    key = k[''Key'']'
            - '                    objects.append({''Key'': key,''VersionId'': version})'
            - '            except:'
            - '                pass'
            - '            print("Delete bucket objects")'
            - '            client.delete_objects(Bucket=bucket, Delete={''Objects'': objects})'
            - '        except:'
            - '            pass'
            - '    print("bucket is already empty")'
            - ''
            - ''
            - 'def timeout(event, context):'
            - '    logging.error(''Execution is timeout, sending failure response to CloudFormation'')'
            - '    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)'
            - ''
            - ''
            - 'def handler(event, context):'
            - '    # Send a failure to CloudFormation if the lambda function is going to timeout'
            - '    timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])'
            - '    timer.start()'
            - ''
            - '    print(''Received event: %s'' % json.dumps(event))'
            - '    status = cfnresponse.SUCCESS'
            - '    try:'
            - '        dest_bucket = event[''ResourceProperties''][''DestBucket'']'
            - '        if event[''RequestType''] == ''Delete'':'
            - '            check_if_versioned = client.get_bucket_versioning(Bucket=dest_bucket)'
            - '            print check_if_versioned'
            - '            if ''Status'' in check_if_versioned:'
            - '                print check_if_versioned[''Status'']'
            - '                print("Delete a versioned Bucket")'
            - '                delete_versionedobjects(dest_bucket)'
            - '            else:'
            - '                print("Delete a nonversioned Bucket")'
            - '                delete_nonversioned_objects(dest_bucket)'
            - '        else:'
            - '            print("Nothing to do")'
            - '    except Exception as e:'
            - '        logging.error(''Exception: %s'' % e, exc_info=True)'
            - '        status = cfnresponse.FAILED'
            - '    finally:'
            - '        timer.cancel()'
            - '        cfnresponse.send(event, context, status, {}, None)'
            - ''
  S3CleanUpRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketVersions'
                  - 's3:DeleteObjectVersion'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::${BucketName}/*'
                  - !Sub 'arn:aws:s3:::*'
            Version: 2012-10-17
          PolicyName: Empty-bucket
