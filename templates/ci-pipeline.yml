---
AWSTemplateFormatVersion: 2010-09-09
Description: Create CI/CD Code Pipeline stack
Parameters:
  GitHubUser:
    Description: Enter GitHub username of the repository owner
    Type: String
  GitHubRepoName:
    Description: Enter the repository name that should be monitored for changes
    Type: String
  SourceRepoBranch:
    Description: Enter the branch name to be monitored
    Type: String
  ReleaseBranch:
    Description: >-
      Enter the release branch name. On successfull build, above branch will be
      merged into this branch.
    Type: String
  GitHubOAuthToken:
    Description: >-
      Create a token with 'repo' and 'admin:repo_hook' permissions here
      https://github.com/settings/tokens
    Type: String
    NoEcho: 'true'
  ArtifactBucket:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      S3 bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-)
    Description: S3 bucket name used to store build artifacts
    Type: String
  CodeBuildRoleArn:
    Description: Code Build service role ARN
    Type: String
  CodePipelineRoleArn:
    Description: Code Pipeline service role ARN
    Type: String
  GitMergeRoleArn:
    Description: GitHub merge service role ARN
    Type: String
Resources:
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      RoleArn: !Ref CodePipelineRoleArn
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              OutputArtifacts:
                - Name: Source
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepoName
                Branch: !Ref SourceRepoBranch
                OAuthToken: !Ref GitHubOAuthToken
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              InputArtifacts:
                - Name: Source
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              OutputArtifacts: []
              Configuration:
                ProjectName: !Ref CodeBuild
              RunOrder: 2
        - Name: Deploy
          Actions:
            - Name: GitMerge
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: '1'
                Provider: Lambda
              Configuration:
                FunctionName: !Ref GitMergeLambda
                UserParameters: !Sub >-
                  {"baseBranch": "${ReleaseBranch}", "githubToken": "${GitHubOAuthToken}", "headBranch": "${SourceRepoBranch}", "owner": "${GitHubUser}", "repo": "${GitHubRepoName}"}
              RunOrder: 3
  CodeBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Description: !Sub 'Submit build jobs for ${GitHubRepoName} as part of CI/CD pipeline'
      ServiceRole: !Ref CodeBuildRoleArn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/python:3.6.5'
        EnvironmentVariables:
          - Name: AWS_REGION
            Value: !Ref 'AWS::Region'
          - Name: PROJECTNAME
            Value: !Sub '${GitHubRepoName}'
          - Name: GITHUBUSER
            Value: !Sub '${GitHubUser}'
          - Name: GITHUBTOKEN
            Value: !Sub '${GitHubOAuthToken}'
          - Name: SOURCEBRANCH
            Value: !Sub '${SourceRepoBranch}'
          - Name: ARTIFACT_BUCKET
            Value: !Ref ArtifactBucket
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2

          phases:
            install:
              commands:
                - echo Setup $PROJECTNAME phase
                - apt-get update -y
                - sudo apt-get install zip gzip tar -y
                - pip3 install --upgrade pip
                - pip3 install --upgrade awscli --use-feature=2020-resolver
                - pip3 install taskcat==0.9.13
                - ln -s /usr/local/bin/pip /usr/bin/pip
            pre_build:
              commands:
                - echo Pre-build $PROJECTNAME phase
                - echo Current Directory is $CODEBUILD_SRC_DIR
                - ls -al
                - git config --global url."https://github.com/".insteadOf "git@github.com:"
                - git init
                - git remote add origin https://$GITHUBTOKEN@github.com/$GITHUBUSER/$PROJECTNAME.git
                - git fetch
                - git checkout -ft origin/$SOURCEBRANCH
                - git submodule init
                - git submodule update --recursive
                - ls -lR
                - aws configure set default.region $AWS_REGION
            build:
              commands:
                - echo Build $PROJECTNAME phase
                - taskcat -test run -l
                - |
                  if $(grep -q "CREATE_FAILED" taskcat_outputs/index.html); then
                    echo Build $PROJECTNAME FAILED!
                    exit 1
                  else
                    echo Build $PROJECTNAME SUCCESS!
                    exit 0
                  fi
              finally:
                - ls -1 taskcat_outputs
                - ls -1 taskcat_outputs | while read LOG; do cat taskcat_outputs/$LOG; done
                - echo Zip and upload report to $ARTIFACT_BUCKET S3 bucket
                - zip -r taskcat_report.zip taskcat_outputs
                - aws s3 cp taskcat_report.zip s3://$ARTIFACT_BUCKET/taskcat_reports/$CODEBUILD_BUILD_ID.zip
  GitMergeLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join
          - |+

          - - import json
            - import logging
            - import requests
            - import os
            - import boto3
            - ''
            - 'region = os.envion[''AWS_REGION'']'
            - 'merge_endpoint = ''https://api.github.com/repos/{owner}/{repo}/merges'''
            - 'code_pipeline = boto3.client(''codepipeline'', region_name=region)'
            - ''
            - ''
            - 'def put_job_success(job, message):'
            - '    logging.info(''Putting job success'')'
            - '    logging.info(message)'
            - '    code_pipeline.put_job_success_result(jobId=job)'
            - ''
            - 'def put_job_failure(job, message):'
            - '    logging.info(''Putting job failure'')'
            - '    logging.info(message)'
            - '    code_pipeline.put_job_failure_result(jobId=job, failureDetails={''message'': message, ''type'': ''JobFailed''})'
            - ''
            - 'def get_user_params(job_data):'
            - '    try:'
            - '        user_parameters = job_data[''actionConfiguration''][''configuration''][''UserParameters'']'
            - '        decoded_parameters = json.loads(user_parameters)'
            - '    except Exception as e:'
            - '        raise Exception(''UserParameters could not be decoded as JSON'')'
            - ''
            - '    if ''baseBranch'' not in decoded_parameters:'
            - '        raise Exception(''UserParameters JSON must include the base branch name'')'
            - ''
            - '    if ''githubToken'' not in decoded_parameters:'
            - '        raise Exception(''UserParameters JSON must include the repo GitHub token'')'
            - ''
            - '    if ''headBranch'' not in decoded_parameters:'
            - '        raise Exception(''UserParameters JSON must include the head branch name'')'
            - ''
            - '    if ''owner'' not in decoded_parameters:'
            - '        raise Exception(''UserParameters JSON must include the repo owner'')'
            - ''
            - '    if ''repo'' not in decoded_parameters:'
            - '        raise Exception(''UserParameters JSON must include the repo name'')'
            - ''
            - '    return decoded_parameters'
            - ''
            - 'def handler(event, context):'
            - '    print(''Received event: %s'' % json.dumps(event))'
            - '    job_id = event[''CodePipeline.job''][''id'']'
            - '    job_data = event[''CodePipeline.job''][''data'']'
            - '    params = get_user_params(job_data)'
            - '    global merge_endpoint'
            - '    merge_endpoint = merge_endpoint.format(owner=params[''owner''], repo=params[''repo_name''])'
            - ''
            - '    # Construct post data and headers'
            - '    data = {''base'': params[''baseBranch''], ''head'': params[''headBranch'']}'
            - '    headers = {''Content-Type'': ''application/json'', ''Authorization'': ''token  %s'' % params[''githubToken'']}'
            - ''
            - '    try:'
            - '        # Submit request'
            - '        result = requests.post(merge_endpoint, data=json.dumps(data), headers=headers)'
            - '        logging.debug(result)'
            - ''
            - '        if result.status_code == requests.codes.created:'
            - '            logging.info(''Merge completed successfully'')'
            - '            put_job_success(job_id, ''Merge complete !'')'
            - '        elif result.status_code == requests.codes.no_content:'
            - '            logging.info(''Nothing to merge !'')'
            - '            put_job_success(job_id, ''Nothing to merge !'')'
            - '        else:'
            - '            logging.error(str(result.raise_for_status()))'
            - '            put_job_failure(job_id, ''Merge failed: %s'' % status)'
            - ''
            - '    except Exception as e:'
            - '        logging.error(''Function failed due to exception, exception: %s'' % e)'
            - '        put_job_failure(job_id, ''Exception: %s'' % e)'
            - ''
            - '    logging.info(''GitHub merge execution complete !'')'
            - '    return True'
            - ''
      Description: Merge GitHub branches
      Handler: index.handler
      Role: !Ref GitMergeRoleArn
      Runtime: python3.6
      Timeout: 30

Outputs:
  CodePipelineName:
    Description: Code Pipeline name
    Value: !Ref CodePipeline
